/**
 * @name 01 Paths from ip_input to icmp_error
 * @description Find data-flow paths that lead from ip_input to the first parameter of icmp_error.
 * @kind path-problem
 * @problem.severity warning
 */

import cpp
import semmle.code.cpp.dataflow.DataFlow
import DataFlow::PathGraph

/*
 * The previous query, 00_mbuf_copydata_tainted_size.ql, discovered some
 * dodgy looking code in `icmp_error`. But is it exploitable?  To find out
 * we need to figure if the zero'th parameter of `icmp_error`, an `mbuf`
 * named `n`, is attacker-controllable.
 *
 * This initial query looks for expression that flows to parameter `n`.
 */

class Config extends DataFlow::Configuration {
  Config() { this = "Paths from ip_input to icmp_error" }

  override predicate isSource(DataFlow::Node source) {
    // Any expression is a valid source.
    exists (source.asExpr())
  }

  override predicate isSink(DataFlow::Node sink) {
    // The sink is the zero'th parameter of `icmp_error`: `struct mbuf *n`.
    exists (Parameter p
    | p = sink.asParameter() and
      p.getFunction().getName() = "icmp_error" and
      p.getIndex() = 0)
  }
}

from Config cfg, DataFlow::PathNode source, DataFlow::PathNode sink
where cfg.hasFlowPath(source, sink)
select source, source, sink, "Expression flows to icmp_error."
